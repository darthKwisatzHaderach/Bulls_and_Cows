type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
- name: src/bullscows/SecretCode.java
  visible: true
  text: |
    package bullscows;

    public class SecretCode implements Comparable<SecretCode> {
        private Integer firstDigit;
        private Integer secondDigit;
        private Integer thirdDigit;
        private Integer fourthDigit;

        public SecretCode(String secretCode) {
            if (secretCode.length() != 4) {
                System.out.println("Secret code should contains 4 digits.");
            } else {
                this.firstDigit = parseDigit(secretCode.substring(0, 1));
                this.secondDigit = parseDigit(secretCode.substring(1, 2));
                this.thirdDigit = parseDigit(secretCode.substring(2, 3));
                this.fourthDigit = parseDigit(secretCode.substring(3, 4));
            }
        }

        public Integer getFirstDigit() {
            return firstDigit;
        }

        public void setFirstDigit(Integer firstDigit) {
            this.firstDigit = firstDigit;
        }

        public Integer getSecondDigit() {
            return secondDigit;
        }

        public void setSecondDigit(Integer secondDigit) {
            this.secondDigit = secondDigit;
        }

        public Integer getThirdDigit() {
            return thirdDigit;
        }

        public void setThirdDigit(Integer thirdDigit) {
            this.thirdDigit = thirdDigit;
        }

        public Integer getFourthDigit() {
            return fourthDigit;
        }

        public void setFourthDigit(Integer fourthDigit) {
            this.fourthDigit = fourthDigit;
        }

        private Integer parseDigit(String digit) {
            try {
                return Integer.valueOf(digit);
            } catch (Error error) {
                System.out.println("Incorrect string representation of digit.");
            }

            return null;
        }

        @Override
        public int compareTo(SecretCode otherSecretCode) {
            int bulls = 0;
            int cows = 0;

            if (getFirstDigit().compareTo(otherSecretCode.getFirstDigit()) == 0) {
                bulls++;
            }

            if (otherSecretCode.getSecondDigit().equals(getFirstDigit()) | otherSecretCode.getThirdDigit().equals(getFirstDigit()) | otherSecretCode.getFourthDigit().equals(getFirstDigit())) {
                cows++;
            }

            if (getSecondDigit().compareTo(otherSecretCode.getSecondDigit()) == 0) {
                bulls++;
            }

            if (otherSecretCode.getFirstDigit().equals(getSecondDigit()) | otherSecretCode.getThirdDigit().equals(getSecondDigit()) | otherSecretCode.getFourthDigit().equals(getSecondDigit())) {
                cows++;
            }

            if (getThirdDigit().compareTo(otherSecretCode.getThirdDigit()) == 0) {
                bulls++;
            }

            if (otherSecretCode.getFirstDigit().equals(getThirdDigit()) | otherSecretCode.getSecondDigit().equals(getThirdDigit()) | otherSecretCode.getFourthDigit().equals(getThirdDigit())) {
                cows++;
            }

            if (getFourthDigit().compareTo(otherSecretCode.getFourthDigit()) == 0) {
                bulls++;
            }

            if (otherSecretCode.getFirstDigit().equals(getFourthDigit()) | otherSecretCode.getSecondDigit().equals(getFourthDigit()) | otherSecretCode.getThirdDigit().equals(getFourthDigit())) {
                cows++;
            }

            if (bulls > 0 & cows > 0) {
                System.out.println(String.format("Grade: %d bull(s) and %d cow(s). The secret code is 9305.", bulls, cows));
            } else if (bulls == 0 && cows == 0) {
                System.out.println("Grade: None. The secret code is 9305.");
            } else if (bulls == 0) {
                System.out.println(String.format("Grade: %d cow(s). The secret code is 9305.", cows));
            } else if (cows == 0) {
                System.out.println(String.format("Grade: %d bull(s). The secret code is 9305.", bulls));
            }

            return 0;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/289/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 08 Nov 2021 10:06:44 UTC
record: 3
